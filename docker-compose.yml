version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: beekeeping_db
    environment:
      POSTGRES_DB: beekeeping_app
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - beekeeping_network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: beekeeping_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - beekeeping_network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Application (Development)
  app-dev:
    build:
      context: .
      target: dev
    container_name: beekeeping_app_dev
    environment:
      NODE_ENV: development
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: beekeeping_app
      DB_USER: postgres
      DB_PASSWORD: postgres123
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: your_super_secret_jwt_key_for_development
      PORT: 3000
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/node_modules
      - uploads_data:/app/uploads
      - logs_data:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - beekeeping_network
    restart: unless-stopped
    profiles:
      - dev

  # Application (Production)
  app-prod:
    build:
      context: .
      target: production
    container_name: beekeeping_app_prod
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: beekeeping_app
      DB_USER: postgres
      DB_PASSWORD: postgres123
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET:-your_super_secret_jwt_key_change_in_production}
      PORT: 3000
    ports:
      - "3000:3000"
    volumes:
      - uploads_data:/app/uploads
      - logs_data:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - beekeeping_network
    restart: unless-stopped
    profiles:
      - prod

  # Nginx (Production only)
  nginx:
    image: nginx:alpine
    container_name: beekeeping_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - uploads_data:/var/www/uploads
    depends_on:
      - app-prod
    networks:
      - beekeeping_network
    restart: unless-stopped
    profiles:
      - prod

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  logs_data:
    driver: local

networks:
  beekeeping_network:
    driver: bridge